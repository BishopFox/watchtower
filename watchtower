#!/usr/bin/env ruby
#######################################################################
# Watchtower - a Static Code Analysis tool for security auditors
#
# Chris Lane
# chris@chris-allen-lane.com
# http://chris-allen-lane.com
# http://twitter.com/chrisallenlane
#######################################################################

require 'rubygems'
require 'digest'
require 'fileutils'
require 'trollop'
require 'lib/models/poi'
require 'lib/models/signature'
require 'lib/models/vulnscanner'


#######################################################################
# Menu options and program flow
#######################################################################
opts = Trollop::options do
	banner File.read('./lib/static/banner.txt')
	
	version 'Version: 1.1.1'

	opt :scan_dir,		'The directory to scan',
			:type 		=> :string,
			:required	=> :true,
			:short 		=> 's'

	opt :colorize,		'Colorizes command-line output',
			:short 		=> 'c'

	opt :config_file,	'Path to the config file.',
			:type 		=> :string,
			:default	=> './config.rb',
			:short 		=> 'f'

	opt :output_format,	'Specify the output format. Valid options are "csv", ' + 
			'"html", "txt", and "xml"',
			:default	=> 'txt',
			:short 		=> 'o'
			
	opt :project_name, 'The name of the project (useful when outputting an HTML report)',
			:type 		=> :string,
			:short 		=> 'p'
end
	

#######################################################################
# Config and Signatures
#######################################################################
# Load the configuration file
unless File.exists? opts[:config_file]
	warn 'The specified config file does not exist.'
	exit
end
require opts[:config_file]

# Verify that the directory to scan actually exists
unless File.exists? opts[:scan_dir]
	warn 'The specified directory to scan does not exist.'
	exit
end


#######################################################################
# Scan
#######################################################################
vulnscanner = VulnScanner.new({:signatures => $signatures, :scan_dir => opts[:scan_dir]})
vulnscanner.scan


#######################################################################
# Display
#######################################################################
# output in the requested format
case opts[:output_format]
	when 'csv'
		require 'fastercsv'
		# kludge in a header row
		puts '"file_type","file","line_number","match","snippet","group"'
		csv_string = FasterCSV.generate(:force_quotes => true) do |csv|
			vulnscanner.points_of_interest.each {|point| csv << point.to_a}
		end
		puts csv_string
		
	when 'html'
		# require erb for templating
		require 'erb'
		include ERB::Util
		
		# sort the points of interest for HTML output
		vulnscanner.sort
		
		# parse and display the HTML output
		erb = ERB.new(File.read($configs[:report_file]), 0, '<>', 'buffer')
		puts erb.result(binding)
	
	when 'xml'
		puts '<points_of_interest>'
		vulnscanner.points_of_interest.each {|point| puts point.xml}
		puts '</points_of_interest>'
	
	else
		if opts[:colorize_given]
			require 'colorize'
			vulnscanner.points_of_interest.each {|point| point.colorize; puts point + "\n\n"}
		else
			vulnscanner.points_of_interest.each {|point| puts point + "\n\n"}
		end
end
